# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# 方法一：不是很干净，return太多东西了

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root == None:
            return None
    
        return self.helper(root, p, q)[-1]
        
    def helper(self, cur, p, q):
        # return: pFound, qFound, result
        if cur.left == None and cur.right == None:
            if cur.val == p.val:                         # 重点！不要忘记在叶子节点也check是否是p或q！
                return True, False, None
            if cur.val == q.val:
                return False, True, None
        
        pFoundL, qFoundL, pFoundR, qFoundR = False, False, False, False
        if cur.left != None:
            pFoundL, qFoundL, found = self.helper(cur.left, p, q)
            if pFoundL and qFoundL:
                return True, True, found
        if cur.right != None:
            pFoundR, qFoundR, found = self.helper(cur.right, p, q)
            if pFoundR and qFoundR:
                return True, True, found
        
        pFound = pFoundL or pFoundR or cur.val == p.val
        qFound = qFoundL or qFoundR or cur.val == q.val
        
        if pFound and qFound:
            return True, True, cur
        else:
            return pFound, qFound, None
            
# 方法二：推荐
# 如果一个node是target，那么返回这个node
# 如果一个node不是target，但是它的左右子树都返回了target，那么返回这个node作为LCA
# 如果一个node不是target，且左右子树至少有一个不包含p/q，那么返回这个node包含的那个target（p or q）；如果都不包含，返回空
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root == None:
            return None
    
        if root.val == p.val or root.val == q.val:
            return root
        
        l = self.lowestCommonAncestor(root.left, p, q)
        r = self.lowestCommonAncestor(root.right, p, q)
        
        if l and r:
            return root
        return l if l else r
